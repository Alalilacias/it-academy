-- MySQL Script generated by MySQL Workbench
-- Thu Feb 22 21:04:36 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema MyYoutube
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema MyYoutube
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `MyYoutube` DEFAULT CHARACTER SET utf8 ;
USE `MyYoutube` ;

-- -----------------------------------------------------
-- Table `MyYoutube`.`countries`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MyYoutube`.`countries` (
  `idcountries` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idcountries`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `MyYoutube`.`postalcodes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MyYoutube`.`postalcodes` (
  `idpostalcodes` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `locality` VARCHAR(45) NOT NULL,
  `province` VARCHAR(45) NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `country_id` INT NOT NULL,
  PRIMARY KEY (`idpostalcodes`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE,
  INDEX `countries_id_idx` (`country_id` ASC) VISIBLE,
  CONSTRAINT `countries_id`
    FOREIGN KEY (`country_id`)
    REFERENCES `MyYoutube`.`countries` (`idcountries`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `MyYoutube`.`users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MyYoutube`.`users` (
  `idusers` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(45) NOT NULL,
  `password` VARCHAR(45) NOT NULL,
  `username` VARCHAR(45) NOT NULL,
  `birthdate` DATE NOT NULL,
  `gender` ENUM("M", "F", "O") NOT NULL COMMENT 'O = other.',
  `country_id` INT NOT NULL COMMENT 'Different table for indexing and because an app like Youtube has a use for that kind of information.',
  `postalcode_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`idusers`),
  INDEX `country_id_idx` (`country_id` ASC) VISIBLE,
  INDEX `postalcode_id_idx` (`postalcode_id` ASC) VISIBLE,
  CONSTRAINT `country_id`
    FOREIGN KEY (`country_id`)
    REFERENCES `MyYoutube`.`countries` (`idcountries`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `postalcode_id`
    FOREIGN KEY (`postalcode_id`)
    REFERENCES `MyYoutube`.`postalcodes` (`idpostalcodes`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `MyYoutube`.`tags`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MyYoutube`.`tags` (
  `idtags` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idtags`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `MyYoutube`.`videos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MyYoutube`.`videos` (
  `idvideos` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(45) NOT NULL,
  `description` VARCHAR(240) NOT NULL,
  `size` DECIMAL(4,2) NOT NULL,
  `videofile_name` VARCHAR(45) NOT NULL,
  `length` TIME NOT NULL,
  `thumbnail` VARCHAR(100) NOT NULL COMMENT 'Container for the link, that should contain the reference in the user directory.',
  `reproductions` INT UNSIGNED NOT NULL,
  `likes` INT NOT NULL,
  `dislikes` INT NOT NULL,
  `state` ENUM("public", "hidden", "private") NOT NULL,
  `tag_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `date_time` DATETIME NOT NULL,
  PRIMARY KEY (`idvideos`),
  INDEX `tag_id_idx` (`tag_id` ASC) VISIBLE,
  INDEX `user_id_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `tag_id`
    FOREIGN KEY (`tag_id`)
    REFERENCES `MyYoutube`.`tags` (`idtags`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `MyYoutube`.`users` (`idusers`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `MyYoutube`.`channels`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MyYoutube`.`channels` (
  `idchannels` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` VARCHAR(240) NOT NULL,
  `creation_date` DATE NOT NULL,
  `owner_id` INT NOT NULL,
  PRIMARY KEY (`idchannels`),
  INDEX `owner_id_idx` (`owner_id` ASC) VISIBLE,
  CONSTRAINT `owner_id`
    FOREIGN KEY (`owner_id`)
    REFERENCES `MyYoutube`.`users` (`idusers`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `MyYoutube`.`subscribes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MyYoutube`.`subscribes` (
  `idsubscribes` INT NOT NULL AUTO_INCREMENT,
  `subscriber_id` INT NOT NULL,
  `subscribedto_id` INT NOT NULL,
  PRIMARY KEY (`idsubscribes`),
  INDEX `subscriber_id_idx` (`subscriber_id` ASC) VISIBLE,
  INDEX `subscribedto_id_idx` (`subscribedto_id` ASC) VISIBLE,
  UNIQUE INDEX `subscribe_limiter` (`subscriber_id` ASC, `subscribedto_id` ASC) VISIBLE,
  CONSTRAINT `subscriber_id`
    FOREIGN KEY (`subscriber_id`)
    REFERENCES `MyYoutube`.`users` (`idusers`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `subscribedto_id`
    FOREIGN KEY (`subscribedto_id`)
    REFERENCES `MyYoutube`.`channels` (`idchannels`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `MyYoutube`.`playlists`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MyYoutube`.`playlists` (
  `idplaylists` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `creation_date` DATE NOT NULL,
  `state` ENUM("public", "private") NOT NULL,
  `owner_id` INT NOT NULL,
  PRIMARY KEY (`idplaylists`),
  INDEX `owner_id_idx` (`owner_id` ASC) VISIBLE,
  CONSTRAINT `owner_id`
    FOREIGN KEY (`owner_id`)
    REFERENCES `MyYoutube`.`users` (`idusers`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `MyYoutube`.`comments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MyYoutube`.`comments` (
  `idcomments` INT NOT NULL AUTO_INCREMENT,
  `commenter_id` INT NOT NULL,
  `video_id` INT NOT NULL,
  `text` VARCHAR(240) NOT NULL,
  `date_time` DATETIME NOT NULL,
  PRIMARY KEY (`idcomments`),
  INDEX `commenter_id_idx` (`commenter_id` ASC) VISIBLE,
  INDEX `video_id_idx` (`video_id` ASC) VISIBLE,
  CONSTRAINT `commenter_id`
    FOREIGN KEY (`commenter_id`)
    REFERENCES `MyYoutube`.`users` (`idusers`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `video_id`
    FOREIGN KEY (`video_id`)
    REFERENCES `MyYoutube`.`videos` (`idvideos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `MyYoutube`.`commentslikes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MyYoutube`.`commentslikes` (
  `idcommentslikes` INT NOT NULL AUTO_INCREMENT,
  `liker_id` INT NOT NULL,
  `comment_id` INT NOT NULL,
  `input` ENUM("like", "dislike") NOT NULL,
  PRIMARY KEY (`idcommentslikes`),
  INDEX `liker_id_idx` (`liker_id` ASC) VISIBLE,
  INDEX `comment_id_idx` (`comment_id` ASC) VISIBLE,
  UNIQUE INDEX `commentlikes_limiter_idx` (`liker_id` ASC, `comment_id` ASC) VISIBLE,
  CONSTRAINT `liker_id`
    FOREIGN KEY (`liker_id`)
    REFERENCES `MyYoutube`.`users` (`idusers`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `comment_id`
    FOREIGN KEY (`comment_id`)
    REFERENCES `MyYoutube`.`comments` (`idcomments`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `MyYoutube`.`videolikes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MyYoutube`.`videolikes` (
  `idvideolikes` INT NOT NULL AUTO_INCREMENT,
  `liker_id` INT NOT NULL,
  `video_id` INT NOT NULL,
  `input` ENUM("like", "dislike") NOT NULL,
  `date_time` DATETIME NOT NULL,
  PRIMARY KEY (`idvideolikes`),
  INDEX `liker_id_idx` (`liker_id` ASC) VISIBLE,
  INDEX `video_id_idx` (`video_id` ASC) VISIBLE,
  CONSTRAINT `liker_id`
    FOREIGN KEY (`liker_id`)
    REFERENCES `MyYoutube`.`users` (`idusers`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `video_id`
    FOREIGN KEY (`video_id`)
    REFERENCES `MyYoutube`.`videos` (`idvideos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
