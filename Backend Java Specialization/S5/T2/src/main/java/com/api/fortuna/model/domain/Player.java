package com.api.fortuna.model.domain;

import com.api.fortuna.model.domain.enums.Roles;
import com.api.fortuna.model.dto.PlayerDTO;
import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import lombok.*;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;


/**
 * This class represents a player in the system.
 * Implements UserDetails for integration with Spring Security.
 * Uses Lombok annotations for boilerplate code reduction and JPA annotations for database mapping.
 * TODO fix testing to adapt to best practices.
 */
@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "players")
public class Player implements UserDetails {

    /**
     * The unique identifier for the player. Automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "idplayers")
    private Long id;

    /**
     * The username of the player.
     */
    private String username;

    /**
     * The email of the player.
     * Must be unique.
     */
    @Email
    @Column(unique = true, nullable = false)
    private String email;

    /**
     * The password of the player.
     */
    @Column(nullable = false)
    private String password;

    /**
     * The role of the player.
     * Enum type stored as ordinal in the database.
     */
    @Enumerated(EnumType.ORDINAL)
    private Roles role;

    /**
     * The number of games the player has played.
     */
    private int defeats;

    /**
     * The number of victories the player has achieved.
     */
    private int victories;

    /**
     * TODO Finish the return process and decide if this variable is needed.
     * The victory rate of the player
     */
    private float winRate;

    /**
     * Returns the authorities granted to the player.
     *
     * @return a collection of granted authorities.
     */
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return role.getAuthorities();
    }

    /**
     * Returns the password used to authenticate the player.
     *
     * @return the player's password.
     */
    @Override
    public String getPassword() {
        return password;
    }

    /**
     * Indicates whether the player's account has expired.
     *
     * @return true if the account is non-expired, false otherwise.
     */
    @Override
    public boolean isAccountNonExpired() {
        return true; // Accounts are never expired in this implementation
    }

    /**
     * Indicates whether the player is locked or unlocked.
     *
     * @return true if the account is non-locked, false otherwise.
     */
    @Override
    public boolean isAccountNonLocked() {
        return true; // Accounts are never locked in this implementation
    }

    /**
     * Indicates whether the player's credentials (password) have expired.
     *
     * @return true if the credentials are non-expired, false otherwise.
     */
    @Override
    public boolean isCredentialsNonExpired() {
        return true; // Credentials are never expired in this implementation
    }

    /**
     * Indicates whether the player is enabled or disabled.
     *
     * @return true if the player is enabled, false otherwise.
     */
    @Override
    public boolean isEnabled() {
        return true; // Players are always enabled in this implementation
    }

    public PlayerDTO toDTO(){
        return new PlayerDTO(this.id, this.username, this.role, this.winRate);
    }
}